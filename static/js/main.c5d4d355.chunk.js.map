{"version":3,"sources":["api/fetchWeather.js","App.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","data","App","useState","setQuery","weather","setWeather","search","e","key","console","log","className","type","placeholder","value","onChange","target","onKeyPress","main","name","sys","country","Math","round","temp","src","icon","alt","description","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAMaA,EAAY,uCAAE,WAAOC,GAAP,iBAAAC,EAAA,sEACFC,IAAMC,IAJnB,kDAI2B,CAC/BC,OAAO,CACHC,EAAEL,EACFM,MAAM,SACNC,MAPI,sCAEW,uBAChBC,EADgB,EAChBA,KADgB,kBAShBA,GATgB,2CAAF,sD,eC6CVC,MA/Cf,WAEE,MAAyBC,mBAAS,IAAlC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA6BD,mBAAS,IAAtC,mBAAOE,EAAP,KAAeC,EAAf,KACMC,EAAM,uCAAG,WAAOC,GAAP,eAAAd,EAAA,yDACF,UAARc,EAAEC,IADQ,gCAEQjB,EAAaC,GAFrB,OAELQ,EAFK,OAGXS,QAAQC,IAAIV,GACZK,EAAWL,GACXG,EAAS,IALE,2CAAH,sDAUZ,OACE,sBAAKQ,UAAU,iBAAf,UACE,uBACEC,KAAK,OACLD,UAAU,SACVE,YAAY,cACZC,MAAOtB,EACPuB,SAAU,SAACR,GAAD,OAAOJ,EAASI,EAAES,OAAOF,QACnCG,WAAYX,IAEbF,EAAQc,MACP,sBAAKP,UAAU,OAAf,UACE,qBAAIA,UAAU,YAAd,UACE,+BAAOP,EAAQe,OACf,8BAAMf,EAAQgB,IAAIC,aAEpB,sBAAKV,UAAU,YAAf,UACGW,KAAKC,MAAMnB,EAAQc,KAAKM,MACzB,2CAEF,sBAAKb,UAAU,OAAf,UACE,qBACEA,UAAU,YACVc,IAAG,4CAAuCrB,EAAQA,QAAQ,GAAGsB,KAA1D,WAAyEC,IAAKvB,EAAQA,QAAQ,GAAGwB,cAEpG,4BAAIxB,EAAQA,QAAQ,GAAGwB,wBCtCrCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c5d4d355.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n\r\nconst URL = \"https://api.openweathermap.org/data/2.5/weather\";\r\nconst API_KEY = \"f33a484cf794d08d0148764789aaba32\";\r\n\r\nexport const fetchWeather= async (query)=> {\r\n    const {data} = await axios.get(URL,{\r\n        params:{\r\n            q:query,\r\n            units:'metric',\r\n            APPID:API_KEY\r\n        }\r\n    })\r\n    \r\n    return data\r\n}\r\n\r\nexport default fetchWeather\r\n","import React,{useState} from 'react'\nimport {fetchWeather } from './api/fetchWeather'\nimport './App.css';\n\nfunction App() {\n\n  const [query,setQuery] = useState('')\n  const [weather,setWeather] = useState({})\n  const search = async (e)=>{\n    if(e.key===\"Enter\"){\n      const data = await fetchWeather(query)\n      console.log(data);\n      setWeather(data)\n      setQuery('')\n    }\n  }\n\n\n  return (\n    <div className=\"main-container\">\n      <input\n        type=\"text\"\n        className=\"search\"\n        placeholder=\"Search City\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        onKeyPress={search}\n      />\n      {weather.main && (\n        <div className=\"city\">\n          <h2 className=\"city-name\">\n            <span>{weather.name}</span>\n            <sup>{weather.sys.country}</sup>\n          </h2>\n          <div className=\"city-temp\">\n            {Math.round(weather.main.temp)}\n            <sup>&deg;C</sup>\n          </div>\n          <div className=\"info\">\n            <img\n              className=\"city-icon\"\n              src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description}\n              />\n              <p>{weather.weather[0].description}</p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n \n"],"sourceRoot":""}